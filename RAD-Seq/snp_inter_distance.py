#!/usr/bin/env python
# linxzh1989@gmail.com, created at 2016-2-17


import sys

INTER_DIS = 1000        # set default snp inter-distance as 1kb

def file2dict(filein):
    with open(filein) as handle:
        d = dict([(f.split('\t')[0], f) for f in handle])
    return d


def chr_dict(d):
    """
    Input dictionary generated by file2dict to make a new dict:
    chromosome as key name, positions as value list.
    """
    new_dict = {}
    for k in d:
        chromosome, pos = tuple(k.split('_'))
        if chromosome in new_dict:
            new_dict[chromosome].append(int(pos))
        else:
            new_dict[chromosome] = [int(pos)]
    return new_dict


def inter_distance(new_dict, intd=INTER_DIS):
    filtered_dict = {}
    for chromosome in new_dict:
        pos_list = new_dict[chromosome][:]
        pos_list.sort()
        if len(pos_list) == 1:  # one snp in chromosome
            filtered_dict[chromosome] = pos_list
        else:
            tmplist = [pos_list[0]]
            pos_list.reverse()
            pos_list.pop()
            while pos_list:
                b_pos = pos_list.pop()
                a_pos = tmplist[-1]
                if abs(a_pos - b_pos) > intd:
                    tmplist.append(b_pos)
            filtered_dict[chromosome] = tmplist
    return filtered_dict
       

def num_control(filtered_dict, thresh):
    upstep = INTER_DIS / 2
    downstep = 500
    step = INTER_DIS / 2
    inter_dis = INTER_DIS
    marker_counter = lambda x : sum(len(x[y]) for y in x)

#    def filter_circle(filtered_dict, upstep, downstep, inter_dis):
#        tmp_dict = inter_distance(filtered_dict, inter_dis)
#        marker_count = marker_counter(tmp_dict)
#        print upstep, downstep, inter_dis, marker_count
#        if abs(marker_count - thresh) <= 100: 
#            return filtered_dict
#        elif marker_count - thresh > 100:
#            inter_dis = inter_dis + upstep
#            upstep = upstep + upstep
#            return filter_circle(filtered_dict, upstep, downstep, inter_dis)
#        elif marker_count - thresh < -100:
#            inter_dis = inter_dis - downstep
#            return filter_circle(filtered_dict, upstep, downstep, inter_dis)

    def filter_circle(filtered_dict, step, inter_dis):
        tmp_dict = inter_distance(filtered_dict, inter_dis)
        marker_count = marker_counter(tmp_dict)
        print upstep, inter_dis, marker_count
        if abs(marker_count - thresh) <= 100: 
            return tmp_dict, inter_dis 
        elif marker_count - thresh > 100:
            inter_dis = inter_dis + step
            step = step + INTER_DIS
            return filter_circle(filtered_dict, step, inter_dis)
        elif marker_count - thresh < -100:
            inter_dis = inter_dis - INTER_DIS/2 
            return filter_circle(filtered_dict, step, inter_dis)
    return filter_circle(filtered_dict, step, inter_dis) 


def get_value(d, final_dict):
    final_list = ['_'.join((y, str(x))) for y in final_dict for x in final_dict[y]]
    return [d[x] for x in final_list]

if __name__ == "__main__":
    filein = sys.argv[1]
    d = file2dict(filein)
    new_dict = chr_dict(d)
    final_dict, inter_dis = num_control(new_dict,6500)
    print sum(len(final_dict[y]) for y in final_dict)
    print len(final_dict)
    final_list = get_value(d, final_dict)
    print len(final_list)
    prefix = sys.argv[1].split('.')[0]
    outfile = "%s_D%s.txt" % (prefix, inter_dis)
    with open(outfile, 'w') as handle:
        handle.writelines(final_list)
    

